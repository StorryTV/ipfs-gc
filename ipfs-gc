#!/bin/bash
while getopts u:s:p: flag
do
    case "${flag}" in
        u) username=${OPTARG};;
        s) minstorage=${OPTARG};;
        p) fullpathtoipfsblocks=${OPTARG};;
    esac
done
IPFS_GC_USER=$username || $(whoami)
if [[ -f "/home/${IPFS_GC_USER}/.ipfs/config" ]]; then
	IPFS_STORAGE_MAX=$(sudo grep -o '"StorageMax": "[^"]*' /home/${IPFS_GC_USER}/.ipfs/config | sudo grep -o '[^"]*$')
	if [[ "$IPFS_STORAGE_MAX" == *"G"* ]]; then
		IPFS_STORAGE_MAX=$(echo $IPFS_STORAGE_MAX | echo $(($(cut -d "G" -f 1) * 1048576)))
	elif [[ "$IPFS_STORAGE_MAX" == *"M"* ]]; then
		IPFS_STORAGE_MAX=$(echo $IPFS_STORAGE_MAX | echo $(($(cut -d "M" -f 1) * 1024)))
	fi
	IPFS_STORAGE_WATERMARK=$(jq .Datastore.StorageGCWatermark /home/${IPFS_GC_USER}/.ipfs/config)
	#IPFS_STORAGE_WATERMARK=$(sudo grep -o '"StorageGCWatermark": "[^,]*' /home/${IPFS_GC_USER}/.ipfs/config | sed -n 's|.*\([^"]*\)".*|\1|p')
	IPFS_STORAGE_MAX_=$(echo $(($IPFS_STORAGE_MAX / 100)))
	IPFS_STORAGE_MAX_=$(echo $(($IPFS_STORAGE_MAX_ * $IPFS_STORAGE_WATERMARK)))
	IPFS_STORAGE_MIN=$(echo $(($IPFS_STORAGE_MAX - $IPFS_STORAGE_MAX_)))
fi
IPFS_GC_MIN_STORAGE=$minstorage || $IPFS_STORAGE_MIN || 10485760 #Put here in bytes how much free space has to be left before ipfs-gc runs.
IPFS_GC_HOME="/home/${IPFS_GC_USER}"
IPFS_GC_TMP='/var/ipfs_gc'
if [[ -d "${fullpathtoipfsblocks}" ]]; then
	FREE=`df -k --output=avail "${fullpathtoipfsblocks}" | tail -n1`
elif [[ -d "${IPFS_GC_HOME}" ]]; then
	FREE=`df -k --output=avail "${IPFS_GC_HOME}" | tail -n1`
else
	FREE=`df -k --output=avail / | tail -n1`
fi
if [[ $FREE -lt $IPFS_GC_MIN_STORAGE ]]; then     # 10GB*1024MB*1024KB = 10485760
	# less than 10GB storage!
	echo 'Starting IPFS GC'
	GC_RUNNING="${IPFS_GC_TMP}/gc_running"
	if [[ -f ${GC_RUNNING} ]]; then
		echo 'IPFS GC is already running'
	else
		rm -rf "${IPFS_GC_HOME}/emptyfile" || command_failed=1
		if [ ${command_failed:-0} -eq 1 ]; then
			echo "Failed: rm -rf '${IPFS_GC_HOME}/emptyfile'"
			command_failed=0
		fi
		touch "${IPFS_GC_TMP}/gc_running" || command_failed=1
		if [ ${command_failed:-0} -eq 1 ]; then
			echo "Failed: touch '${IPFS_GC_TMP}/gc_running'"
			command_failed=0
		fi
		chmod 700 "${IPFS_GC_TMP}/gc_running" || command_failed=1
		if [ ${command_failed:-0} -eq 1 ]; then
			echo "Failed: chmod 700 '${IPFS_GC_TMP}/gc_running'"
			command_failed=0
		fi
		if ((systemctl is-active ipfs) | grep -q 'inactive'); then
			IPFS_SERVICE=0
		else
			IPFS_SERVICE=1
			systemctl stop ipfs || command_failed=1
			if [ ${command_failed:-0} -eq 1 ]; then
				echo 'Failed: systemctl stop ipfs'
				command_failed=0
			fi
		fi
		sudo -H -u ${IPFS_GC_USER} bash -c 'ipfs shutdown' || command_failed=1
		if [ ${command_failed:-0} -eq 1 ]; then
			echo "Failed: sudo -H -u ${IPFS_GC_USER} bash -c 'ipfs shutdown'"
			command_failed=0
		fi
		python3 -m http.server 8080 --directory ${IPFS_GC_TMP}/maintenance-page & || command_failed=1
		if [ ${command_failed:-0} -eq 1 ]; then
			echo "Failed: python3 -m http.server 8080 --directory ${IPFS_GC_TMP}/maintenance-page &"
			command_failed=0
		fi
		sudo -H -u ${IPFS_GC_USER} bash -c 'ipfs repo gc' || command_failed=1
		if [ ${command_failed:-0} -eq 1 ]; then
			echo "Failed: sudo -H -u ${IPFS_GC_USER} bash -c ipfs repo gc"
			command_failed=0
		fi
		kill -9 `ps -ef |grep http.server |grep 8080 |awk '{print $2}'` || command_failed=1
		if [ ${command_failed:-0} -eq 1 ]; then
			echo 'kill -9 `ps -ef |grep http.server |grep 8080 |awk {print $2}`'
			command_failed=0
		fi
		fuser -k 8080/tcp || command_failed=1
		if [ ${command_failed:-0} -eq 1 ]; then
			echo 'Failed: fuser -k 8080/tcp'
			command_failed=0
		fi
		if [ ${IPFS_SERVICE:-0} -eq 1 ]; then
			systemctl start ipfs || command_failed=1
			if [ ${command_failed:-0} -eq 1 ]; then
				echo 'Failed: systemctl start ipfs'
				command_failed=0
			fi
			IPFS_SERVICE=0
		fi
		fallocate -l 500M "${IPFS_GC_HOME}/emptyfile" || command_failed=1
		if [ ${command_failed:-0} -eq 1 ]; then
			echo 'Failed: fallocate -l 500M "${IPFS_GC_HOME}/emptyfile"'
			command_failed=0
		fi
		rm -rf "${IPFS_GC_TMP}/gc_running" || command_failed=1
		if [ ${command_failed:-0} -eq 1 ]; then
			echo 'Failed: rm -rf "${IPFS_GC_TMP}/gc_running"'
			command_failed=0
		fi
		echo 'IPFS Automatic GC succesfully completed'
	fi
else
	echo 'IPFS Automatic GC not needed yet'
fi
